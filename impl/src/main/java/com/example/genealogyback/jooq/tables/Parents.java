/*
 * This file is generated by jOOQ.
 */
package com.example.genealogyback.jooq.tables;


import com.example.genealogyback.dto.ParentTypeDto;
import com.example.genealogyback.jooq.Keys;
import com.example.genealogyback.jooq.Public;
import com.example.genealogyback.jooq.tables.Persons.PersonsPath;
import com.example.genealogyback.jooq.tables.records.ParentsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Parents extends TableImpl<ParentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.parents</code>
     */
    public static final Parents PARENTS = new Parents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParentsRecord> getRecordType() {
        return ParentsRecord.class;
    }

    /**
     * The column <code>public.parents.child_id</code>. Идентификатор ребенка
     */
    public final TableField<ParentsRecord, UUID> CHILD_ID = createField(DSL.name("child_id"), SQLDataType.UUID.nullable(false), this, "Идентификатор ребенка");

    /**
     * The column <code>public.parents.parent_id</code>. Идентификатор родителя
     */
    public final TableField<ParentsRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID.nullable(false), this, "Идентификатор родителя");

    /**
     * The column <code>public.parents.parent_type</code>. Отец или мать
     */
    public final TableField<ParentsRecord, ParentTypeDto> PARENT_TYPE = createField(DSL.name("parent_type"), SQLDataType.VARCHAR(10).nullable(false), this, "Отец или мать", new EnumConverter<String, ParentTypeDto>(String.class, ParentTypeDto.class));

    private Parents(Name alias, Table<ParentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Parents(Name alias, Table<ParentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.parents</code> table reference
     */
    public Parents(String alias) {
        this(DSL.name(alias), PARENTS);
    }

    /**
     * Create an aliased <code>public.parents</code> table reference
     */
    public Parents(Name alias) {
        this(alias, PARENTS);
    }

    /**
     * Create a <code>public.parents</code> table reference
     */
    public Parents() {
        this(DSL.name("parents"), null);
    }

    public <O extends Record> Parents(Table<O> path, ForeignKey<O, ParentsRecord> childPath, InverseForeignKey<O, ParentsRecord> parentPath) {
        super(path, childPath, parentPath, PARENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ParentsPath extends Parents implements Path<ParentsRecord> {
        public <O extends Record> ParentsPath(Table<O> path, ForeignKey<O, ParentsRecord> childPath, InverseForeignKey<O, ParentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ParentsPath(Name alias, Table<ParentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ParentsPath as(String alias) {
            return new ParentsPath(DSL.name(alias), this);
        }

        @Override
        public ParentsPath as(Name alias) {
            return new ParentsPath(alias, this);
        }

        @Override
        public ParentsPath as(Table<?> alias) {
            return new ParentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<ParentsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ONE_PARENT_PER_TYPE_UNIQUE_CONSTRAINT);
    }

    @Override
    public List<ForeignKey<ParentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PARENTS__PARENTS_CHILD_ID_FK, Keys.PARENTS__PARENTS_PARENT_ID_FK);
    }

    private transient PersonsPath _parentsChildIdFk;

    /**
     * Get the implicit join path to the <code>public.persons</code> table, via
     * the <code>parents_child_id_fk</code> key.
     */
    public PersonsPath parentsChildIdFk() {
        if (_parentsChildIdFk == null)
            _parentsChildIdFk = new PersonsPath(this, Keys.PARENTS__PARENTS_CHILD_ID_FK, null);

        return _parentsChildIdFk;
    }

    private transient PersonsPath _parentsParentIdFk;

    /**
     * Get the implicit join path to the <code>public.persons</code> table, via
     * the <code>parents_parent_id_fk</code> key.
     */
    public PersonsPath parentsParentIdFk() {
        if (_parentsParentIdFk == null)
            _parentsParentIdFk = new PersonsPath(this, Keys.PARENTS__PARENTS_PARENT_ID_FK, null);

        return _parentsParentIdFk;
    }

    @Override
    public Parents as(String alias) {
        return new Parents(DSL.name(alias), this);
    }

    @Override
    public Parents as(Name alias) {
        return new Parents(alias, this);
    }

    @Override
    public Parents as(Table<?> alias) {
        return new Parents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Parents rename(String name) {
        return new Parents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Parents rename(Name name) {
        return new Parents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Parents rename(Table<?> name) {
        return new Parents(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parents where(Condition condition) {
        return new Parents(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parents where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parents where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parents where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parents where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parents where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parents where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parents where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parents whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parents whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
