/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.genealogyback.controller;

import com.example.genealogyback.dto.ErrorDto;
import com.example.genealogyback.dto.PersonDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-20T11:31:35.011117+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Person", description = "the Person API")
public interface PersonApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /persons/{person_id} : Метод удаления карточки родственника и его предков по идентификатору
     * Метод предназначен для удаления в БД данных по карточке родственника.
     *
     * @param personId Идентификатор карточки родственника (required)
     * @return Успешное удаление (status code 200)
     */
    @Operation(
        operationId = "personsPersonIdDelete",
        summary = "Метод удаления карточки родственника и его предков по идентификатору",
        description = "Метод предназначен для удаления в БД данных по карточке родственника.",
        tags = { "Person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное удаление")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/persons/{person_id}"
    )
    
    default ResponseEntity<Void> personsPersonIdDelete(
        @Parameter(name = "person_id", description = "Идентификатор карточки родственника", required = true, in = ParameterIn.PATH) @PathVariable("person_id") UUID personId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /persons/{person_id} : Метод получения карточки по идентификатору
     * Метод предназначен для получения из БД данных по одному родственнику.
     *
     * @param personId Идентификатор карточки с данными родственника (required)
     * @return Карточка родственника (status code 200)
     */
    @Operation(
        operationId = "personsPersonIdGet",
        summary = "Метод получения карточки по идентификатору",
        description = "Метод предназначен для получения из БД данных по одному родственнику.",
        tags = { "Person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Карточка родственника", content = {
                @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = PersonDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persons/{person_id}",
        produces = { "application/json;charset=UTF-8" }
    )
    
    default ResponseEntity<PersonDto> personsPersonIdGet(
        @Parameter(name = "person_id", description = "Идентификатор карточки с данными родственника", required = true, in = ParameterIn.PATH) @PathVariable("person_id") UUID personId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=UTF-8"))) {
                    String exampleString = "{ \"dearthDate\" : \"05.03.1917\", \"firstName\" : \"Ivan\", \"gender\" : \"male\", \"spouse_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b8\", \"surname\" : \"Petrov\", \"maidenName\" : \"Smirnova\", \"bio\" : \"Биография моего предка очень интересна\", \"avatar\" : \"https://sartur.sgu.ru/wp-content/uploads/2021/09/avatar1-1536x1536.png\", \"birthDate\" : \"05.03.1917\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=UTF-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /persons/{person_id} : Метод обновления карточки родственника
     * Метод предназначен для обновления в БД данных по имеющейся карточке родственника
     *
     * @param personId Идентификатор карточки с данными родственника (required)
     * @param personDto  (required)
     * @return Подтверждение успешного обновления (status code 200)
     *         or Некорректные входные данные. Возвращает список атрибутов с ошибками (status code 400)
     *         or Любая неожиданная ошибка сервера (status code 5XX)
     */
    @Operation(
        operationId = "personsPersonIdPut",
        summary = "Метод обновления карточки родственника",
        description = "Метод предназначен для обновления в БД данных по имеющейся карточке родственника",
        tags = { "Person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Подтверждение успешного обновления", content = {
                @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = PersonDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректные входные данные. Возвращает список атрибутов с ошибками", content = {
                @Content(mediaType = "application/json;charset=UTF-8", array = @ArraySchema(schema = @Schema(implementation = String.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "5XX", description = "Любая неожиданная ошибка сервера", content = {
                @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = ErrorDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/persons/{person_id}",
        produces = { "application/json;charset=UTF-8", "application/json" },
        consumes = { "application/json;charset=UTF-8" }
    )
    
    default ResponseEntity<PersonDto> personsPersonIdPut(
        @Parameter(name = "person_id", description = "Идентификатор карточки с данными родственника", required = true, in = ParameterIn.PATH) @PathVariable("person_id") UUID personId,
        @Parameter(name = "PersonDto", description = "", required = true) @Valid @RequestBody PersonDto personDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dearthDate\" : \"05.03.1917\", \"firstName\" : \"Ivan\", \"gender\" : \"male\", \"spouse_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b8\", \"surname\" : \"Petrov\", \"maidenName\" : \"Smirnova\", \"bio\" : \"Биография моего предка очень интересна\", \"avatar\" : \"https://sartur.sgu.ru/wp-content/uploads/2021/09/avatar1-1536x1536.png\", \"birthDate\" : \"05.03.1917\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=UTF-8"))) {
                    String exampleString = "{ \"dearthDate\" : \"05.03.1917\", \"firstName\" : \"Ivan\", \"gender\" : \"male\", \"spouse_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b8\", \"surname\" : \"Petrov\", \"maidenName\" : \"Smirnova\", \"bio\" : \"Биография моего предка очень интересна\", \"avatar\" : \"https://sartur.sgu.ru/wp-content/uploads/2021/09/avatar1-1536x1536.png\", \"birthDate\" : \"05.03.1917\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=UTF-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /persons : Метод добавления нового родственника в древо
     * Метод предназначен для сохранения в БД данных по новому родственнику
     *
     * @param personDto  (required)
     * @return Подтверждение успешного сохранения (status code 200)
     *         or Некорректные входные данные. Возвращает список атрибутов с ошибками (status code 400)
     */
    @Operation(
        operationId = "personsPost",
        summary = "Метод добавления нового родственника в древо",
        description = "Метод предназначен для сохранения в БД данных по новому родственнику",
        tags = { "Person" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Подтверждение успешного сохранения", content = {
                @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = PersonDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректные входные данные. Возвращает список атрибутов с ошибками", content = {
                @Content(mediaType = "application/json;charset=UTF-8", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/persons",
        produces = { "application/json;charset=UTF-8" },
        consumes = { "application/json;charset=UTF-8" }
    )
    
    default ResponseEntity<PersonDto> personsPost(
        @Parameter(name = "PersonDto", description = "", required = true) @Valid @RequestBody PersonDto personDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=UTF-8"))) {
                    String exampleString = "{ \"dearthDate\" : \"05.03.1917\", \"firstName\" : \"Ivan\", \"gender\" : \"male\", \"spouse_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b8\", \"surname\" : \"Petrov\", \"maidenName\" : \"Smirnova\", \"bio\" : \"Биография моего предка очень интересна\", \"avatar\" : \"https://sartur.sgu.ru/wp-content/uploads/2021/09/avatar1-1536x1536.png\", \"birthDate\" : \"05.03.1917\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=UTF-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
