/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.genealogyback.controller;

import com.example.genealogyback.dto.ErrorDto;
import com.example.genealogyback.dto.ParentsDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-27T15:23:13.003773200+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Parents", description = "the Parents API")
public interface ParentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /person/{id}/parents/{parent_id}/ : Метод удаления связи с человеком
     * Метод предназначен для удаления связи с предком
     *
     * @param id Идентификатор карточки родственника (required)
     * @param parentId Идентификатор карточки предка (required)
     * @return Успешное удаление (status code 200)
     *         or Отсутсвует сущность с данным id (status code 404)
     *         or Любая неожиданная ошибка сервера (status code 5XX)
     */
    @Operation(
        operationId = "personIdParentsParentIdDelete",
        summary = "Метод удаления связи с человеком",
        description = "Метод предназначен для удаления связи с предком",
        tags = { "Parents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное удаление"),
            @ApiResponse(responseCode = "404", description = "Отсутсвует сущность с данным id", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class)))
            }),
            @ApiResponse(responseCode = "5XX", description = "Любая неожиданная ошибка сервера", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/person/{id}/parents/{parent_id}/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> personIdParentsParentIdDelete(
        @Parameter(name = "id", description = "Идентификатор карточки родственника", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "parent_id", description = "Идентификатор карточки предка", required = true, in = ParameterIn.PATH) @PathVariable("parent_id") UUID parentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /person/{id}/parents/ : Метод добавления человека в генеалогическое древо
     * Метод предназначен для добавления в БД человека
     *
     * @param id Идентификатор карточки человека (required)
     * @param parentsDto  (required)
     * @return Подтверждение успешного сохранения (status code 201)
     *         or Отсутсвует сущность с данным id (status code 404)
     *         or Некорректные входные данные. Возвращает список атрибутов с ошибками (status code 400)
     *         or Любая неожиданная ошибка сервера (status code 5XX)
     */
    @Operation(
        operationId = "personIdParentsPost",
        summary = "Метод добавления человека в генеалогическое древо",
        description = "Метод предназначен для добавления в БД человека",
        tags = { "Parents" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Подтверждение успешного сохранения", content = {
                @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = ParentsDto.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = ParentsDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Отсутсвует сущность с данным id", content = {
                @Content(mediaType = "application/json;charset=UTF-8", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректные входные данные. Возвращает список атрибутов с ошибками", content = {
                @Content(mediaType = "application/json;charset=UTF-8", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class)))
            }),
            @ApiResponse(responseCode = "5XX", description = "Любая неожиданная ошибка сервера", content = {
                @Content(mediaType = "application/json;charset=UTF-8", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class))),
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ErrorDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/person/{id}/parents/",
        produces = { "application/json;charset=UTF-8", "application/json" },
        consumes = { "application/json;charset=UTF-8" }
    )
    
    default ResponseEntity<ParentsDto> personIdParentsPost(
        @Parameter(name = "id", description = "Идентификатор карточки человека", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "ParentsDto", description = "", required = true) @Valid @RequestBody ParentsDto parentsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"parentType\" : \"mother\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json;charset=UTF-8"))) {
                    String exampleString = "{ \"id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"parentType\" : \"mother\" }";
                    ApiUtil.setExampleResponse(request, "application/json;charset=UTF-8", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
